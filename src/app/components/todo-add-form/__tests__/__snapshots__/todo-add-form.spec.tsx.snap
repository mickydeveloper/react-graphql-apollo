// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing <TodoAddForm> the snapshot should match 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TodoAddForm
    addTodo={[Function]}
    match={
      Object {
        "isExact": true,
        "params": Object {},
        "path": "",
        "url": "",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Create new todo
        </h1>,
        <form
          onSubmit={[Function]}
        >
          <TextInput
            input={
              Object {
                "name": "text",
                "onChange": [Function],
                "value": "",
              }
            }
            required={true}
            title="Todo text"
            type="text"
            validate={[Function]}
          />
          <ButtonStandard
            callback={[Function]}
            text="Cancel"
            type="simple"
            valid={true}
          />
          <ButtonStandard
            callback={[Function]}
            className="button float-right create"
            text="Create"
            valid={false}
          />
        </form>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create new todo",
        },
        "ref": null,
        "rendered": "Create new todo",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <TextInput
              input={
                Object {
                  "name": "text",
                  "onChange": [Function],
                  "value": "",
                }
              }
              required={true}
              title="Todo text"
              type="text"
              validate={[Function]}
            />,
            <ButtonStandard
              callback={[Function]}
              text="Cancel"
              type="simple"
              valid={true}
            />,
            <ButtonStandard
              callback={[Function]}
              className="button float-right create"
              text="Create"
              valid={false}
            />,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "input": Object {
                "name": "text",
                "onChange": [Function],
                "value": "",
              },
              "required": true,
              "title": "Todo text",
              "type": "text",
              "validate": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "callback": [Function],
              "text": "Cancel",
              "type": "simple",
              "valid": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "callback": [Function],
              "className": "button float-right create",
              "text": "Create",
              "valid": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Create new todo
          </h1>,
          <form
            onSubmit={[Function]}
          >
            <TextInput
              input={
                Object {
                  "name": "text",
                  "onChange": [Function],
                  "value": "",
                }
              }
              required={true}
              title="Todo text"
              type="text"
              validate={[Function]}
            />
            <ButtonStandard
              callback={[Function]}
              text="Cancel"
              type="simple"
              valid={true}
            />
            <ButtonStandard
              callback={[Function]}
              className="button float-right create"
              text="Create"
              valid={false}
            />
          </form>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create new todo",
          },
          "ref": null,
          "rendered": "Create new todo",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <TextInput
                input={
                  Object {
                    "name": "text",
                    "onChange": [Function],
                    "value": "",
                  }
                }
                required={true}
                title="Todo text"
                type="text"
                validate={[Function]}
              />,
              <ButtonStandard
                callback={[Function]}
                text="Cancel"
                type="simple"
                valid={true}
              />,
              <ButtonStandard
                callback={[Function]}
                className="button float-right create"
                text="Create"
                valid={false}
              />,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "input": Object {
                  "name": "text",
                  "onChange": [Function],
                  "value": "",
                },
                "required": true,
                "title": "Todo text",
                "type": "text",
                "validate": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "callback": [Function],
                "text": "Cancel",
                "type": "simple",
                "valid": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "callback": [Function],
                "className": "button float-right create",
                "text": "Create",
                "valid": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
